// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name StatementTapFramework
import CryptoKit
import Foundation
import SafariServices
import Swift
import UIKit
import WebKit
import _Concurrency
public enum BankCode : Swift.Int {
  case Mandiri
  case BCA
  case BNI
  case BRI
  case BDO
  case BPI
  case KB
  case PNB
  case UB
  case MB
  case RCBC
  case UBC
  case CLRB
  case BCAC
  case SCB
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct StatementTapRequest {
  public enum BrowserMode {
    case None
    case Safari
    case WebView
    public static func == (a: StatementTapFramework.StatementTapRequest.BrowserMode, b: StatementTapFramework.StatementTapRequest.BrowserMode) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var country: StatementTapFramework.Country
  public var bankCodes: [StatementTapFramework.BankCode]?
  public var externalId: Swift.String
  public var successURL: Swift.String
  public var failURL: Swift.String
  public var organizationName: Swift.String
  public var redirectDuration: Swift.Int64
  public var browserMode: StatementTapFramework.StatementTapRequest.BrowserMode
  public var dismissAlert: StatementTapFramework.DismissAlert?
  public var isAutoConsent: Swift.Bool
  public var useRememberMe: Swift.Bool
  public init(country: StatementTapFramework.Country, bankCodes: [StatementTapFramework.BankCode]? = nil, externalId: Swift.String, successURL: Swift.String, failURL: Swift.String, organizationName: Swift.String, redirectDuration: Swift.Int64 = 60, browserMode: StatementTapFramework.StatementTapRequest.BrowserMode = .WebView, dismissAlert: StatementTapFramework.DismissAlert? = nil, isAutoConsent: Swift.Bool = false, useRememberMe: Swift.Bool = true)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class StatementTapSF : ObjectiveC.NSObject, SafariServices.SFSafariViewControllerDelegate {
  public static let shared: StatementTapFramework.StatementTapSF
  public func initialize(apiKey: Swift.String, certPath: Swift.String? = nil, isDebug: Swift.Bool = false, isStaging: Swift.Bool = false)
  public func checkout<T>(statementTapRequest: StatementTapFramework.StatementTapRequest, vc: UIKit.UIViewController, delegate: T?, showBackButton: Swift.Bool = true) throws where T : StatementTapFramework.CoreDelegate, T.T == Swift.String
  public func checkoutWithinSameScreen<T>(statementTapRequest: StatementTapFramework.StatementTapRequest, vc: UIKit.UIViewController, delegate: T?, showWithinSameScreen: Swift.Bool, showBackButton: Swift.Bool = true) throws where T : StatementTapFramework.CoreDelegate, T.T == Swift.String
  public func cancel()
  public func clearRememberMe()
  public func initSecurityCheck(delegate: StatementTapFramework.CheckDelegate)
  public enum TapError : Swift.Error {
    case invalidReturnAndFailUrl
    public static func == (a: StatementTapFramework.StatementTapSF.TapError, b: StatementTapFramework.StatementTapSF.TapError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @objc deinit
}
public enum Country : Swift.Int {
  case ID
  case PH
  case TH
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
public struct DismissAlert {
  public var message: Swift.String
  public var cancelButtonText: Swift.String
  public var confirmButtonText: Swift.String
  public init(message: Swift.String, confirmButtonText: Swift.String, cancelButtonText: Swift.String)
}
public enum StatementErrorCode : Swift.String {
  case STTIBDO4001
  case STTIBDO4002
  case STTIBDO4003
  case STTIBDO4004
  case STTIBDO4005
  case STTIBDO4006
  case STTIBDO4007
  case STTIBDO4008
  case STTIBDO4009
  case STTIBDO4010
  case STTIBDO4011
  case STTIBDO4012
  case STTIBDO4013
  case STTIBDO4014
  case STTIBDO4015
  case STTIBDO4016
  case STTIBDO4017
  case STTIBDO4018
  case STTIBDO4019
  case STTIBDO4020
  case STTIBDO4021
  case STTIBDO4022
  case STTIBDO4023
  case STTIBDO4024
  case STTIBDO4025
  case STTIBDO4026
  case STTIBDO4027
  case STTIBDO4028
  case STTIBDO4029
  case STTIBDO4030
  case STTIBDO4031
  case STTIBDO4032
  case STTIBDO4033
  case STTIBDO4034
  case STTIBDO4035
  case STTIBDO4037
  case STTIBDO5002
  case STTIBDO5003
  case STTIBDO5004
  case STTIBDO5005
  case STTIBDO5006
  case STTIBDO5007
  case STTIBDO5008
  case STTIBDO5009
  case STTIBDO5010
  case STTIBDO5011
  case STTIBDO5012
  case STTIBDO5013
  case STTIBDO5014
  case STTIBDO5015
  case STTIBDO5016
  case STTIBDO6001
  case STTIBDO6002
  case STTIBDO6003
  case STTIBDO6004
  case STTIBDO6005
  case STTIBDO6006
  case STTIBDO6007
  case STTIBDO6008
  case STTIBDO6009
  case STTIBDO6010
  case STTIBDO6011
  case STTIBDO6012
  case STTIBDO6013
  case STTIBDO6014
  case STTIBDO6015
  case STTIBDO6016
  case STTIBDO6017
  case STTIBDO6018
  case STTIBDO6019
  case STTIBDO6020
  case STTIBPI4001
  case STTIBPI4002
  case STTIBPI4003
  case STTIBPI4004
  case STTIBPI4005
  case STTIBPI4006
  case STTIBPI4007
  case STTIBPI4008
  case STTIBPI4009
  case STTIBPI4010
  case STTIBPI4011
  case STTIBPI4012
  case STTIBPI4013
  case STTIBPI4014
  case STTIBPI4015
  case STTIBPI4016
  case STTIBPI5001
  case STTIBPI5002
  case STTIBPI5003
  case STTIBPI5004
  case STTIBPI5005
  case STTIBPI5006
  case STTIBPI5007
  case STTIBPI5008
  case STTIBPI5009
  case STTIBPI5011
  case STTIBPI5013
  case STTIBPI5014
  case STTIBPI5015
  case STTIBPI5016
  case STTIBPI5017
  case STTIBPI5018
  case STTIBPI5019
  case STTIBPI5020
  case STTIBPI5021
  case STTIBPI6001
  case STTIBPI6003
  case STTIBPI6004
  case STTIBPI6005
  case STTIBPI6006
  case STTIBPI6007
  case STTIBPI6008
  case STTIBPI6009
  case STTIBPI6010
  case STTIBPI6011
  case STTIBPI6012
  case STTIBPI6013
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol CoreDelegate {
  associatedtype T
  func onResult(data: Self.T?, error: Swift.String?, errorCode: Swift.String?)
}
public protocol CheckDelegate {
  func hasCheckError()
}
public struct StatementTapError {
  public static let shared: StatementTapFramework.StatementTapError
  public func getErrorMessage(errorCode: StatementTapFramework.StatementErrorCode) -> Swift.String
}
extension StatementTapFramework.BankCode : Swift.Equatable {}
extension StatementTapFramework.BankCode : Swift.Hashable {}
extension StatementTapFramework.BankCode : Swift.RawRepresentable {}
extension StatementTapFramework.StatementTapRequest.BrowserMode : Swift.Equatable {}
extension StatementTapFramework.StatementTapRequest.BrowserMode : Swift.Hashable {}
extension StatementTapFramework.StatementTapSF.TapError : Swift.Equatable {}
extension StatementTapFramework.StatementTapSF.TapError : Swift.Hashable {}
extension StatementTapFramework.Country : Swift.Equatable {}
extension StatementTapFramework.Country : Swift.Hashable {}
extension StatementTapFramework.Country : Swift.RawRepresentable {}
extension StatementTapFramework.StatementErrorCode : Swift.Equatable {}
extension StatementTapFramework.StatementErrorCode : Swift.Hashable {}
extension StatementTapFramework.StatementErrorCode : Swift.RawRepresentable {}
